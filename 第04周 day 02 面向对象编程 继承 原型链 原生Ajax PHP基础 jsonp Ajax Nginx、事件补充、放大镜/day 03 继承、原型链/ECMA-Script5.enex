<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20180103T083842Z" application="Evernote/Windows" version="6.x">
<note><title>ECMA-Script5</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">

<en-note><div><span style="font-size: 16px; font-weight: bold;">严格模式</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">所谓严格模式，从字面上就很好理解，即更严格的模式</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">在这种模式下执行，浏览器会对JS的要求更苛刻。</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">举例：&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">function m1(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;max = 100;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">m1();</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">alert(max); <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">//由于max没有var声明，因此max会变成全局变量</span></span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-weight: bold;">但是在严格模式下：</span></span></div><div align="left" style="min-height: 13pt;"><div align="left" style="min-height: 13pt;"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(54, 75, 192);">function</span> <span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(219, 120, 0);">m1</span><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">(){</span></span></div></div><div align="left" style="min-height: 13pt;"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(1, 1, 1);">&nbsp; &nbsp;</span> <span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(36, 140, 133);">&quot;use strict&quot;</span><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">;</span></span></div></div><div align="left" style="min-height: 13pt;"><div><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">&nbsp; &nbsp; max</span> <span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(87, 121, 9);">=</span> <span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(155, 28, 235);">100</span><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">;</span></div></div><div align="left" style="min-height: 13pt;"><div><span style="font-size: 15px;"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">}</span></span></div></div><div align="left" style="min-height: 13pt;"><div><span style="font-size: 15px;"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">m1();</span></span></div></div><div align="left" style="min-height: 13pt;"><div><span style="font-size: 15px;"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(8, 8, 8);">alert(max);</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(255, 255, 204); font-size: 15px; color: rgb(255, 0, 0);">Uncaught ReferenceError: max is not defined</span></span></div><div><br/></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">不加var报错</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">with被禁用</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">callee 被禁用</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">禁止delete w</span><span style="font-size: 16px; background-color: rgb(251, 250, 248);">indow对象属性</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">八进制被禁用</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">arguments与形参不同步</span></div><div><span style="font-size: 16px; background-color: rgb(251, 250, 248);">this不允许指向window (无window前缀的调用)</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">所以不要轻易在全局范围开头增加 &quot;use strict&quot; 声明</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">建议在作用域内部使用</span></div></div></div></div><div><br/></div><div><span style="font-size: 16px; font-weight: bold;">bind方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">Jquery里面也有bind方法，它大概长这个样子：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">$(&quot;#btn&quot;).bind(&quot;click&quot;,function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp;alert(this.id);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">})</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">或许你真的从来没有认真的想过，为什么我们的匿名函数里会有this关键字？</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">当你点击的时候，#btn的ID就被弹了出来。this为什么会指向了#btn???</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">btn.onclick = function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp;setTimeout(function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.innerText = &quot;已点击&quot;;&nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">.bind(this)</span><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">,2000)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">我们都知道定时器的匿名函数里不能写this，它会指向window</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-weight: bold;">但有了bind方法以后，我们可以随意设定this 的指向</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">貌似在字面量编程风格中，可能好处就更明显</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">var Engine = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;body : $(&quot;#main&quot;),</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;setBackground : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; this.body.css(&quot;background&quot;,&quot;url(xxxx.png) repeat-y&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;loadEvents : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;$(&quot;#cb&quot;).click(function(){ &nbsp;</span>//我们给某个元素添加单击事件</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.setBackground(&quot;&quot;); &nbsp;</span>//但实际操作却是Engine本身，从结构上做到了解耦</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}.bind(this));&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp;init : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //.......</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.loadEvents();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return this;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">}</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248);">bind黑科技：</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248);">var $ &nbsp;= document.querySelectorAll.bind(document);</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248);">之后选择元素都可以 ;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248);">$();就可以选择元素喽；</span></div><div><br/></div><div><br/></div></div><div><br/></div><div><span style="font-size: 16px; font-weight: bold;">JSON.parse / JSON.stringify</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">我们从eval方法，过渡到了JSON.parse()，去除了eval方法注入代码的风险</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">JSON提供了两个方法</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">JSON.parse，解析一个字符串，并返回对象</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var obj = JSON.parse(&apos;{&quot;id&quot;:3, &quot;value&quot;:30}&apos;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">obj.value; //30</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">注意：id\value都使用了双引号，否则解析不正确</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(45, 79, 201);">JSON.stringify，解析一个对象，并返回字符串</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var obj = { id: 3, value: 30 };</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">JSON.stringify(obj); &nbsp;//</span></span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&apos;{&quot;id&quot;:3, &quot;value&quot;:30}&apos;</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">扩展： 额外的处理函数</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var obj = JSON.parse(&apos;{&quot;id&quot;:3, &quot;value&quot;:30.99}&apos;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">obj.value; //30.99</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">如果你想四舍五入</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">JSON.parse(</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&apos;{&quot;id&quot;:3, &quot;value&quot;:30.99}&apos;, <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">function(key, val){</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp;if(typeof val == &quot;string&quot;){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return Math.round(Number(val));</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return Math.round(val);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(166, 0, 196);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(166, 0, 196);">}</span>)</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">最终结果： obj.value // 31</span></span></div><div><br/></div></div><div><br/></div><div><span style="font-size: 16px;"><span style="font-size: 16px; font-weight: bold;">数组的额外方法</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">indexOf</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">[2,&nbsp;5,&nbsp;7,&nbsp;3,&nbsp;5].indexOf(5) &nbsp;//返回1 &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">跟字符串一样，真心不用解释&nbsp;</span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">forEach</span></span></div><div><span style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;,&nbsp;&quot;d&quot;,&nbsp;&quot;e&quot;].forEach(function(item, index, array){</span></span></div><div><span style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">&nbsp;//跟jquery几乎一样，除了参数顺序</span></span></span></div><div><span style="font-size: 12px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">&nbsp; &nbsp; &nbsp;//item表示当前遍历的元素，index表示下标，array表示数组本身</span></span></span></div><div><span style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;console.log(item);</span></span></div><div><span style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">});</span></span></div><div><br/></div><div><span style="font-size: 12px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51);">其实也可以更简单：</span></span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;,&nbsp;&quot;d&quot;,&nbsp;&quot;e&quot;].forEach(alert);</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0); font-weight: bold;">注意：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;,&nbsp;&quot;d&quot;,&nbsp;&quot;e&quot;].forEach(console.log); &nbsp; &nbsp;//会出现<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">Uncaught TypeError: Illegal invocation(…)</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">因为执行上下文非法导致的，我们需要指定一下上下文：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;c&quot;,&nbsp;&quot;d&quot;,&nbsp;&quot;e&quot;].forEach(console.log, console); &nbsp;//正确执行</span></div><div><br/></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">实现原理模拟：</span></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">arr.myforEach = function( callback ){</span></font></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></font></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; callback(this[i], i, this);</span></font></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></font></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">}</span></font></div><div><br/></div><div><font color="#3665EE" style="font-size: 12pt;"><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">实际原理：</span></font></div><div><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">arr.myforEach = function( callback, target ){</span></div><div><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></div><div><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp; &nbsp; callback.call(target, this[i], i, this);</span></div><div><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">}</span></div><div><span style="font-size: 12pt; background-color: rgb(251, 250, 248); color: rgb(54, 101, 238); line-height: 21px;">}</span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">map 映射，遍历----&gt;操作-----&gt;返回</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">var newarr = [1,2,3,4,5].map(function(item, index, array){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;return item+2; &nbsp;//</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">})</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">newarr;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">结果：&nbsp;[3, 4, 5, 6, 7]</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">实现原理：</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">arr.mymap = function( callback ){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; var temp = [];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; temp.push( callback(this[i], i, this) );</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return temp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238); line-height: 21px;">}</span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">reduce 归并</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[1,2,3,4].reduce(function(pre, next, index, array){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">&nbsp;//</span></span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(50, 135, 18);">参数中的x和y，代表了之前的处理结果和下一个元素</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return x+y; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">//return的结果会赋值给下一个函数的x参数</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">结果 ： 10</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">实现原理：</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">arr.myreduce = function( callback ){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; if(this.length == 1) return arr[0];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; if(this.length == 0) return null;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; var result = this[0];</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp; &nbsp; &nbsp; &nbsp; for(var i=1; i&lt;this.length; i++){</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; result =&nbsp;callback(result, this[i], i, this);</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 12pt; color: rgb(54, 101, 238);">}</span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">filter 过滤</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">var res = [88,69,92,77,90,96,98,99].filter(function(item, index, array){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;return item&gt;80;<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">//找出所有大于80的元素</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">});</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">结果：</span><span style="font-size: 15px; background-color: rgb(251, 250, 248);">[88,92,90,96,98,99]</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">实现原理：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">arr.myfilter = function( callback ){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; var temp = [];</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; if( callback(this[i], i, this) ){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; temp.push(this[i]);</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return temp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">}</span></span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(255, 0, 0);">some 某些 &nbsp; (我觉得叫anyone更适合)</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">if([&quot;yt&quot;,&quot;hr&quot;,&quot;wc&quot;,&quot;jk&quot;].some(function(item){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(50, 135, 18);">&nbsp;//判断数组中是否存在yt？</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;return item==&quot;yt&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">})){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;alert(&quot;好的！&quot;);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">跟过滤器好像差不多，但它只会返回一个布尔类型，如果匹配成功，则返回true</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">而且一旦匹配成功，后面就不再遍历了，如果没有匹配成功，最后返回false</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">可以用来做一些检测</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">实现原理：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">arr.mysome = function( callback ){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; if( callback( this[i], i, this) ){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return true;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return false;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">}</span></span></div></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div style="font-size: 12px;"><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">every</span></span></div><div style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">[&quot;ab&quot;,&quot;bc&quot;,&quot;cd&quot;,&quot;xy&quot;,&quot;zz&quot;].every(function(item){</span></div><div style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">&nbsp; &nbsp; &nbsp;return typeof item === &quot;string&quot;;</span></div><div style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">});</span></div><div style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">跟some一样，但要求每一项都符合，才返回true</span></div><div style="font-size: 12px;"><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51);">有一项不合格就返回false</span></div><div style="font-size: 12px;"><div><br/></div></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">实现原理：</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">arr.myevery = function( callback ){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; for(var i=0; i&lt;this.length; i++){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; if( !callback(this[i], i, this) &nbsp;){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return false;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">&nbsp;&nbsp; &nbsp;&nbsp; &nbsp; return true;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); line-height: 21px;">}</span></span></div></div><div><br/></div><div><span style="font-size: 16px; font-weight: bold;">String的trim方法</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&quot; &nbsp; abc &nbsp; &quot;.trim();</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">首尾去空格</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&quot;abc&quot;</span></div></div><div><br/></div><div><span style="font-size: 16px;"><span style="font-size: 16px; font-weight: bold;">Object.keys() /Object.values()</span></span></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">用于获取对象的属性和对象的值</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">对于不可枚举的属性无效</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">var obj = {id:3, age: 20};</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.keys(obj); &nbsp;&nbsp; &nbsp;// [&quot;id&quot;,&quot;age&quot;]</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.values(obj); &nbsp;&nbsp;// [3, 20]</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.defineProperty(obj, &quot;age&quot;, {</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; enumerable : false</span></div><div><span style="background-color: rgb(251, 250, 248); font-size: 11pt; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">});</span></div><div><br/></div><div><span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.keys(obj);</span> <span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp; &nbsp;</span><span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">// [&quot;id&quot;]</span></div><div><span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.values(obj);</span> <span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;</span><span style="font-size: 11pt; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">// [3]</span></div></div><div><br/></div><div><span style="font-size: 16px;"><span style="font-size: 16px; font-weight: bold;">Object.create&nbsp;</span></span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">创建对象的一种新形式：</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">var father = {</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;money: 999999</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">var son = Object.create(father);</span></span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">son.money; //999999</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//不要误以为这是在复制对象，实际上这是在继承，因为fahter对象的内容被存入了son对象的原型当中</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">举例：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">function Father(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;this.name = &quot;王健林&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;this.age = 60;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">Father.prototype = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp;&nbsp; wanda : function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return &quot;$99999999999&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//以前的写法，大概是这样：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//Son.prototype = new Father();</span></div><div><span style="font-size: 15.199999809265137px; background-color: rgb(251, 250, 248); line-height: 16.799999237060547px;">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//缺点很明显就是，连名字和年龄都继承了，其实我们并不想要这些</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238);">//下面的写法，带来了一定的好处，Son的原型的原型是Fahter的原型，同样是原型链继承的效果。</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">Son.prototype = Object.create(Father.prototype);</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">function Son(){ &nbsp; &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;this.name = &quot;王思聪&quot;;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;this.age = 30;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">new Son().wanda();</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">//要注意这个方法不能实现对象拷贝，因为这里是原型的赋值，并且生成了新对象，不是简单的属性复制</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; font-weight: bold;">例如：</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">var a = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;text1 : &quot;abc&quot;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">var b = {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;text2 : &quot;def&quot;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">b = Object.create(a); //结果b虽然继承了a，但原有内容被覆盖了！</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">b.text1; //abc</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0);">b.text2; //undefined</span></span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">解决办法如下：</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">var b = Object.create(a, {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp;text2 : {</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;value : &quot;def&quot;&nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248);">})</span></div></div><div><br/></div><div><span style="font-size: 16px; font-weight: bold;">Object.defineProperty</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">对于属性的定义和拦截，讲个实用的例子吧</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;!DOCTYPE html&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;html&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;head&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;meta charset=&quot;UTF-8&quot;&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;title&gt;&lt;/title&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;/head&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;script src=&quot;js/jquery-1.8.3.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;script type=&quot;text/javascript&quot;&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &quot;use strict&quot;;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; window.onload = function(){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QF.appInit();</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; var QF = {</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; scope : {},</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; appInit(){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.htmlstr = document.body.innerHTML</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.app = $(&quot;[qf-app]&quot;).get(0);</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.inputlist = $(this.app).find(&quot;[qf-model]&quot;).get();</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for(let inpt of this.inputlist){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if(inpt.nodeName==&quot;INPUT&quot; &amp;&amp; inpt.type == &quot;text&quot;){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let modelname = inpt.getAttribute(&quot;qf-model&quot;);</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let vm = {</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; viewlist : $(QF.app).find(&quot;:contains(&apos;&quot;+&quot;{{&quot;+modelname+&quot;}}&apos;)&quot;)</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; };</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //view model的修改监听</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object.defineProperty(vm, &quot;value&quot;, {</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; configurable: true,</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; enumerable: true,</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set : function(val){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.viewlist.each(function(){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(this).html(val);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.scope[modelname] = vm;</span></div><div><br/></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //输入框的修改监听</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Object.defineProperty(HTMLInputElement.prototype, &quot;value&quot;, {</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; configurable: true,</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; enumerable: true,</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; set: function(val){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; console.log(val, inpt.value);</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; QF.scope[this.getAttribute(&quot;qf-model&quot;)].value = this.value;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; $(&quot;input&quot;).bind(&quot;input&quot;,function(){</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; this.value = this.value;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; }</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;/script&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;body&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;div qf-app&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;input qf-model=&quot;yourname&quot; type=&quot;text&quot;/&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;input qf-model=&quot;hername&quot; type=&quot;text&quot;/&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;{{yourname}}&lt;/p&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;{{yourname}}&lt;/p&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;p&gt;{{hername}}&lt;/p&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &lt;/div&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &lt;/body&gt;</span></div><div><span style="background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&lt;/html&gt;</span></div><div><br/></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">上面这段代码是一个简单的View —</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">—</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">&gt; Model</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">—</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">—</span> <span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">&gt;</span><span style="background-color: rgb(251, 250, 248);">&nbsp;</span> <span style="background-color: rgb(251, 250, 248); font-weight: bold;">View</span><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">的 数据绑定</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">defineProperty函数最大的好处就是可以自定义属性的读写权限，以及遍历权限(可枚举性)</span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">Object.defineProperty(stu, &apos;score&apos;, {</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;writeable: true, &nbsp;//表示该属性是否可写</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;enumerable: true, &nbsp;//表示该属性是否可以枚举（遍历） &nbsp; &nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;configurable: true, &nbsp;//表示该属性是否可删除，以及是否可配置, 比如writeable能不能被修改&nbsp;</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;set: function(val){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当属性被赋值时，做一些拦截动作，例如将数据同步到view</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp;get: function(){</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //当属性被获取时，做一些拦截动作，例如权限检查之类的</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(54, 101, 238); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">});</span></span></div><div><br/></div></div><div><br/></div><div><span style="font-size: 16px; font-weight: bold;">Object.getPropertyOf</span></div><div><br/></div><div style="box-sizing: border-box; padding: 8px; font-size: 12px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902);"><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">用来获取原型对象。</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">function&nbsp;Person(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;this.method1 =&nbsp;function(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(1); &nbsp; &nbsp; }</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="font-size: 15px;"><span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">Man.prototype =&nbsp;new&nbsp;Person();//原型继承</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">function&nbsp;Man(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;this.method1 =&nbsp;function(){</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp; &nbsp; &nbsp; &nbsp; <span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(255, 0, 0); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">//相当于this.__proto__.method1();</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="background-color: rgb(251, 250, 248); font-size: 15px; color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace; font-weight: bold;">Object.getPrototypeOf(this).method1();</span></span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">&nbsp;&nbsp;&nbsp;&nbsp;}</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">}</span></div><div><br/></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">var&nbsp;man =&nbsp;new&nbsp;Man(); &nbsp;</span></div><div><span style="font-size: 15px; background-color: rgb(251, 250, 248); color: rgb(51, 51, 51); font-family: Monaco, Menlo, Consolas, &apos;Courier New&apos;, monospace;">man.method1();</span></div></div><div style="text-align: center;"><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div></en-note>]]></content><created>20160911T123521Z</created><updated>20180103T083824Z</updated><note-attributes><author>【千锋互联】JS高级讲师--尹涛</author><source>desktop.win</source><source-application>evernote.win32</source-application><reminder-order>20161202T051753Z</reminder-order></note-attributes></note></en-export>
