
function test(temp, obj){
    //正则处理字符串
    temp = temp.replace(/<%=(.+?)%>/g,"`) \n print($1) \n print(`");
    //匹配<%= 内容 %> 中的所有东西 ,因为是输出内容一定在语句之中，所以需要考虑上面的标签和下边的标签
    temp = temp.replace(/<%(.+?)%>/g,"`) \n $1 \n print(`");
    // temp = temp.replace(/<%[\s|S]+?%>/g,"`) \n $1 \n print(`");
    temp = "print(`"+temp+"`)";

    // console.log(temp);

    //经过正则的处理，我们希望模板字符串变成如下形式:
    /******************************************* 
    print(`<ul>`)
    for(var i=0; i<data.names.length; i++){
        print(`<li>`) 
        print(data.names[i]) 
        print(`</li>`)
    }
    print(`</ul>`)
    *********************************************/

    //准备一段代码，动态生成一个函数，把刚才准备好的temp代码嵌入当中
    var funcStr = `(function(data){
        var strhtml = "";
        function print(str){
            strhtml += str;
        }
        ${temp} //把temp字符串放入该函数中，形成一个完整的函数
        return strhtml;
    })`;

    /*************这段代码生成后的样子******************
    (function(data){
        var strhtml = "";
        function print(str){
             strhtml += str;  
        } 
        print(`<ul>`)
   for(var i=0; i<data.names.length; i++){
        print(`<li>`)
        print(data.names[i])
        print(`</li>`)
   }
        print(`</ul>`)
        return strhtml; 
    })
    *********************************************/

    //使用eval执行代码，生成并返回这个函数
    var func = eval(funcStr);

    //调用这个函数，得到最终的字符串模板
    var res = func(obj);

    return res;
}
